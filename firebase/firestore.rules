rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Firebase AuthでUserが作られたときにCloud FunctionsでHookして
    // 作ってあげても良い

    function isAnyAuthenticated() {
      return request.auth != null;
    }

    function isUserAuthenticated(userID) {
        return isAnyAuthenticated() && userID == request.auth.uid;
    }

    function documentPath(paths) {  // paths must be array of string
      return path([['databases', database, 'documents'].join('/'), paths.join('/')].join('/'))
    }

    function isNotUpdating(fieldName) {
      return !(fieldName in request.resource.data) || request.resource.data[fieldName] == resource.data[fieldName]
    }

    // For Functions Tutorial
  match /messages/{documentId} {
    allow create
    allow update
  }

    match /users/{userID} {
      allow create: if isUserAuthenticated(userID);
      allow update: if isAnyAuthenticated();
      allow get: if isAnyAuthenticated();
    }

    match /todoGroups/{groupID} {
      allow create: if isAnyAuthenticated();
      allow update: if isAnyAuthenticated();
      allow get: if isAnyAuthenticated();

      match /todos/{todoID} {
        allow create: if isAnyAuthenticated();
        allow update: if isAnyAuthenticated();
        allow get, list: if isAnyAuthenticated();
        allow delete: if isAnyAuthenticated();
      }
    }

    match /anniversaries/{anniversaryID} {
      allow create: if isAnyAuthenticated()
        && (request.resource.data.title is string && request.resource.data.title.size() <= 100)
        && request.resource.data.date is timestamp
        && request.resource.data.createdAt == request.time
        && request.resource.data.updatedAt == request.time
      ;
      allow update: if isAnyAuthenticated();
      allow get: if isAnyAuthenticated();
    }

    match /trashDays/{groupID}/days/{dayID} {
      allow update: if isAnyAuthenticated();
      allow get, list: if isAnyAuthenticated();
    }
  }
}